'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _timeRange = require('./time-range');

var _timeRange2 = _interopRequireDefault(_timeRange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var merge = function merge(other) {
  for (var i = 0; i < other.length; ++i) {
    this.add(other.start(i), other.end(i));
  }
};

var findRange = function findRange(value) {
  var i = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

  while (i < this._ranges.length && value > this._ranges[i].end) {
    ++i;
  }
  return {
    index: i,
    contained: i < this._ranges.length && value >= this._ranges[i].start
  };
};

var isNumber = function isNumber(num) {
  return typeof num === 'number' && !isNaN(num);
};

var isValidIndex = function isValidIndex(i) {
  return isNumber(i) && i >= 0 && i < this._ranges.length;
};

var TimeRanges = function () {
  function TimeRanges() {
    var other = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

    _classCallCheck(this, TimeRanges);

    this._ranges = [];
    if (other != null) {
      merge.call(this, other);
    }
  }

  _createClass(TimeRanges, [{
    key: 'start',
    value: function start(i) {
      if (!isValidIndex.call(this, i)) {
        throw new Error('Invalid index');
      }
      return this._ranges[i].start;
    }
  }, {
    key: 'end',
    value: function end(i) {
      if (!isValidIndex.call(this, i)) {
        throw new Error('Invalid index');
      }
      return this._ranges[i].end;
    }
  }, {
    key: 'add',
    value: function add(start, end) {
      if (!isNumber(start) || !isNumber(end) || end < start) {
        throw new Error('Invalid range');
      }
      var s = findRange.call(this, start);
      var e = findRange.call(this, end, s.index);
      if (s.contained) {
        start = Math.min(start, this._ranges[s.index].start);
      }
      if (e.contained) {
        end = Math.max(end, this._ranges[e.index].end);
      }
      var len = e.index - s.index + (e.contained ? 1 : 0);
      this._ranges.splice(s.index, len, new _timeRange2.default(start, end));
    }
  }, {
    key: 'length',
    get: function get() {
      return this._ranges.length;
    }
  }]);

  return TimeRanges;
}();

exports.default = TimeRanges;
//# sourceMappingURL=data:application/json;base64,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VSxFQUFFLEtBQVosSUFBcUIsRUFBRSxTQUFGLEdBQWMsQ0FBZCxHQUFrQixDQUF2QyxDQUFaO0FBQ0EsV0FBSyxPQUFMLENBQWEsTUFBYixDQUFvQixFQUFFLEtBQXRCLEVBQTZCLEdBQTdCLEVBQWtDLHdCQUFjLEtBQWQsRUFBcUIsR0FBckIsQ0FBbEM7QUFDRDs7O3dCQWhDYTtBQUNaLGFBQU8sS0FBSyxPQUFMLENBQWEsTUFBcEI7QUFDRDs7Ozs7O2tCQVZrQixVIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRpbWVSYW5nZSBmcm9tICcuL3RpbWUtcmFuZ2UnXHJcblxyXG5jb25zdCBtZXJnZSA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb3RoZXIubGVuZ3RoOyArK2kpIHtcclxuICAgIHRoaXMuYWRkKG90aGVyLnN0YXJ0KGkpLCBvdGhlci5lbmQoaSkpXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBmaW5kUmFuZ2UgPSBmdW5jdGlvbiAodmFsdWUsIGkgPSAwKSB7XHJcbiAgd2hpbGUgKGkgPCB0aGlzLl9yYW5nZXMubGVuZ3RoICYmIHZhbHVlID4gdGhpcy5fcmFuZ2VzW2ldLmVuZCkge1xyXG4gICAgKytpXHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICBpbmRleDogaSxcclxuICAgIGNvbnRhaW5lZDogKGkgPCB0aGlzLl9yYW5nZXMubGVuZ3RoICYmIHZhbHVlID49IHRoaXMuX3Jhbmdlc1tpXS5zdGFydClcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGlzTnVtYmVyID0gZnVuY3Rpb24gKG51bSkge1xyXG4gIHJldHVybiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKG51bSkpXHJcbn1cclxuXHJcbmNvbnN0IGlzVmFsaWRJbmRleCA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgcmV0dXJuIChpc051bWJlcihpKSAmJiBpID49IDAgJiYgaSA8IHRoaXMuX3Jhbmdlcy5sZW5ndGgpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVSYW5nZXMge1xyXG4gIGNvbnN0cnVjdG9yIChvdGhlciA9IG51bGwpIHtcclxuICAgIHRoaXMuX3JhbmdlcyA9IFtdXHJcbiAgICBpZiAob3RoZXIgIT0gbnVsbCkge1xyXG4gICAgICBtZXJnZS5jYWxsKHRoaXMsIG90aGVyKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IGxlbmd0aCAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmFuZ2VzLmxlbmd0aFxyXG4gIH1cclxuXHJcbiAgc3RhcnQgKGkpIHtcclxuICAgIGlmICghaXNWYWxpZEluZGV4LmNhbGwodGhpcywgaSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGluZGV4JylcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl9yYW5nZXNbaV0uc3RhcnRcclxuICB9XHJcblxyXG4gIGVuZCAoaSkge1xyXG4gICAgaWYgKCFpc1ZhbGlkSW5kZXguY2FsbCh0aGlzLCBpKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kZXgnKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX3Jhbmdlc1tpXS5lbmRcclxuICB9XHJcblxyXG4gIGFkZCAoc3RhcnQsIGVuZCkge1xyXG4gICAgaWYgKCFpc051bWJlcihzdGFydCkgfHwgIWlzTnVtYmVyKGVuZCkgfHwgZW5kIDwgc3RhcnQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJhbmdlJylcclxuICAgIH1cclxuICAgIGNvbnN0IHMgPSBmaW5kUmFuZ2UuY2FsbCh0aGlzLCBzdGFydClcclxuICAgIGNvbnN0IGUgPSBmaW5kUmFuZ2UuY2FsbCh0aGlzLCBlbmQsIHMuaW5kZXgpXHJcbiAgICBpZiAocy5jb250YWluZWQpIHtcclxuICAgICAgc3RhcnQgPSBNYXRoLm1pbihzdGFydCwgdGhpcy5fcmFuZ2VzW3MuaW5kZXhdLnN0YXJ0KVxyXG4gICAgfVxyXG4gICAgaWYgKGUuY29udGFpbmVkKSB7XHJcbiAgICAgIGVuZCA9IE1hdGgubWF4KGVuZCwgdGhpcy5fcmFuZ2VzW2UuaW5kZXhdLmVuZClcclxuICAgIH1cclxuICAgIGNvbnN0IGxlbiA9IGUuaW5kZXggLSBzLmluZGV4ICsgKGUuY29udGFpbmVkID8gMSA6IDApXHJcbiAgICB0aGlzLl9yYW5nZXMuc3BsaWNlKHMuaW5kZXgsIGxlbiwgbmV3IFRpbWVSYW5nZShzdGFydCwgZW5kKSlcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
